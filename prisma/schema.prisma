generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Category {
  id          String     @id @default(cuid())
  description String     @unique
  artists     Artist[]
  Show        Show[]
  Album       Album[]
  Song        Song[]
  Playlist    Playlist[]
}

model User {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  firstName String
  lastName  String
  email     String   @unique
  username  String   @unique
  password  String
  avatarUrl String?
  isAdmin   Boolean  @default(false)

  favouriteSongs  Song[]
  favouriteAlbums Album[]
  favouriteShows  Show[]

  userFollowers User[] @relation(name: "userFollowerFollowing")
  userFollowing User[] @relation(name: "userFollowerFollowing")

  artistFollowers Artist[] @relation(name: "artistFollowsUser")
  artistFollowing Artist[] @relation(name: "userFollowsArtist")

  createdPlaylists   Playlist[] @relation(name: "createdPlaylists")
  favouritePlaylists Playlist[] @relation(name: "favouritePlaylists")
}

model Song {
  id         String   @id @default(cuid())
  albumIndex Int
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  name       String
  url        String
  duration   Int

  users    User[]
  album    Album?  @relation(fields: [albumId], references: [id])
  albumId  String?
  artist   Artist? @relation(fields: [artistId], references: [id])
  artistId String?

  category   Category   @relation(fields: [categoryId], references: [id])
  categoryId String
  playlists  Playlist[]
}

model Artist {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  name      String   @unique
  avatarUrl String?
  headerUrl String?

  songs      Song[]
  albums     Album[]
  category   Category @relation(fields: [categoryId], references: [id])
  categoryId String

  artistFollowers Artist[] @relation(name: "artistFollowerFollowing")
  artistFollowing Artist[] @relation(name: "artistFollowerFollowing")

  userFollowers User[] @relation(name: "userFollowsArtist")
  userFollowing User[] @relation(name: "artistFollowsUser")
}

model Album {
  id         String   @id @default(cuid())
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  name       String   @unique
  avatarUrl  String?
  releasedOn DateTime

  category   Category @relation(fields: [categoryId], references: [id])
  categoryId String

  songs    Song[]
  artist   Artist @relation(fields: [artistId], references: [id])
  artistId String
  users    User[]
}

model Show {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  name      String
  author    String
  avatarUrl String?

  subscribers User[]
  category    Category @relation(fields: [categoryId], references: [id])
  categoryId  String

  episodes Episode[]
}

model Episode {
  id          String   @id @default(cuid())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  title       String
  description String
  duration    Int
  url         String

  show   Show   @relation(fields: [showId], references: [id])
  showId String
}

model Playlist {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  name      String
  avatarUrl String?

  songs Song[]

  category   Category @relation(fields: [categoryId], references: [id])
  categoryId String

  createdBy User   @relation(name: "createdPlaylists", fields: [userId], references: [id])
  userId    String

  favouritedBy User[] @relation(name: "favouritePlaylists")
}
