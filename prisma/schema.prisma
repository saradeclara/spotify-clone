// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

// datasource db {
//   provider = "postgresql"
//   url      = env("DATABASE_URL")
// }

model Category {
  id          String     @id @default(cuid())
  description String     @unique
  songs       Song[]
  playlists   Playlist[]
  shows       Show[]
  albums      Album[]
  artists     Artist[]
}

model User {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  firstName String
  lastName  String
  email     String   @unique
  password  String
  isAdmin   Boolean  @default(false)

  favouriteSongs      Song[]
  favouriteAlbums     Album[]
  favouriteArtists    Artist[]
  favouriteShows      Show[]
  createdPlaylists    Playlist[] @relation(name: "createdPlaylists")
  favouritedPlaylists Playlist[] @relation(name: "favPlaylists")
}

model Playlist {
  id          String   @id @default(cuid())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  name        String
  thumbnail   String?
  songs       Song[]
  Category    Category @relation(fields: [categoryId], references: [id])
  categoryId  String
  createdBy   User?    @relation(name: "createdPlaylists", fields: [createdById], references: [id])
  createdById String?
  User        User[]   @relation(name: "favPlaylists")
}

model Show {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  name      String
  author    String
  thumbnail String?

  users      User[]
  Category   Category @relation(fields: [categoryId], references: [id])
  categoryId String
}

model Song {
  id         String   @id @default(cuid())
  albumIndex Int
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  name       String
  url        String
  duration   Int

  album      Album      @relation(fields: [albumId], references: [id])
  albumId    String
  artist     Artist     @relation(fields: [artistId], references: [id])
  artistId   String
  users      User[]
  playlists  Playlist[]
  Category   Category   @relation(fields: [categoryId], references: [id])
  categoryId String

  @@unique([name, albumIndex])
}

model Album {
  id         String   @id @default(cuid())
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  name       String   @unique
  thumbnail  String?
  releasedOn DateTime

  songs      Song[]
  artist     Artist   @relation(fields: [artistId], references: [id])
  artistId   String
  users      User[]
  Category   Category @relation(fields: [categoryId], references: [id])
  categoryId String
}

model Artist {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  name      String   @unique
  thumbnail String?

  songs      Song[]
  albums     Album[]
  users      User[]
  Category   Category @relation(fields: [categoryId], references: [id])
  categoryId String
}
